{"version":3,"sources":["App.js","components/login.js","components/admin.js","components/user.js","serviceWorker.js","index.js"],"names":["socket","Login","className","onSubmit","this","props","login","id","message","size","name","type","placeholder","title","React","Component","Admin","onClick","start_torgs","br","st","brokers","i","length","broker","push","money","table","j","stocks","stocksName","price","ontorg_stocks","ontorg_price","key","get_brokers","pr","User","sell","event","state","index","console","log","username","count","buy","in_torg","get_index","setState","Number","target","value","get_count","get_info","get_torgs","onChange","Sum","znak","sum","App","start_exchange","preventDefault","elements","io","on","emit","data","uname","persons","get_content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.137695dc.chunk.js","sourcesContent":["import React from 'react';\nimport Login from \"./components/login\";\nimport Admin from \"./components/admin\"\nimport User from \"./components/user\"\nimport * as io from 'socket.io-client'\nimport './App.css';\n\nlet socket;\n\nclass App extends React.Component{\n  state = {\n    username: 'Nobody',\n    stocks: null,\n    brokers: null,\n    start_exchange: false,\n    message: ''\n  };\n\n  login = (event) => {\n    event.preventDefault();\n    let name = event.target.elements.name.value;\n    console.log(name);\n\n    socket = io('https://intense-fortress-72118.herokuapp.com');\n\n    socket.on('connect',function(){\n      socket.emit('login', {name:name});\n    });\n\n    socket.on('welcome', (data) => {\n      this.setState({username: data.uname, message: data.message});\n    });\n\n    socket.on('update', (data) => {\n      this.setState({\n        stocks: data.stocks,\n        brokers: data.persons,\n      })\n    });\n\n    socket.on('start_ex', data =>{\n      this.setState({\n        start_exchange: true\n      });\n      console.log(this.state.username, this.state.start_exchange)\n    });\n  };\n\n  start_torgs = () => {\n    socket.emit('start');\n  };\n\n  sell = (name, index, count) => {\n    socket.emit('sell', {name:name, index:index, count:count});\n  };\n\n  buy = (name, index, count) => {\n    console.log(name, index, count);\n    socket.emit('buy', {name:name, index:index, count:count});\n  };\n\n  render() {\n    return (\n        <div className=\"App\">\n          {this.get_content()}\n        </div>\n    );\n  }\n\n  get_content() {\n    let content;\n    if (this.state.username === 'Nobody')\n      content = <Login\n          login={this.login}\n          message = {this.state.message}\n      />;\n    else if (this.state.username === 'admin') {\n      content = <Admin\n          brokers={this.state.brokers}\n          start_torgs={this.start_torgs}\n      />;\n    }\n    else\n      content = <User\n          brokers={this.state.brokers}\n          username ={this.state.username}\n          stocks ={this.state.stocks}\n          sell ={this.sell}\n          buy = {this.buy}\n      />;\n    return content;\n  }\n\n}\n\n\n\nexport default App;\n","import React from \"react\";\nimport \"./login.css\"\n\nexport default class Login extends React.Component{\n    render() {\n        return(\n            <div className=\"Login\">\n\n                <form onSubmit={this.props.login}>\n                    <p>Вход в систему:</p>\n                    <p id=\"warning\">{this.props.message}</p>\n                    <input size = \"24\" name=\"name\" id=\"password\" type=\"text\" placeholder=\"Ваш ник\" title=\"type &quot;a&quot;\"></input>\n                    <p><button id=\"a\">Войти</button> </p>\n                </form>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport \"./main.css\"\n\n\nexport default class Admin extends React.Component{\n    render(){\n        return (\n            <div className=\"Admin\">\n                <h2>\n                <table className=\"table\">\n                    <tr>\n                        <th className=\"th1\">БИРЖА</th>\n                        <th className=\"th2\">\n                            <div>Мир</div>\n                            <div>Инвестиций</div>\n                        </th>\n                    </tr>\n                </table>\n                </h2>\n                <nav className=\"one\">\n                    <ul>\n                        <li> Admin </li>\n                        \n                    </ul>\n                </nav>\n                <p><button id=\"a\" onClick={this.props.start_torgs}>Начать торги</button> </p>\n                <div className=\"brokers\">\n                    {get_brokers(this.props.brokers, this.props.stocks)}\n                </div>\n            </div>\n        );\n\n        function get_brokers(br, st){\n            let brokers=[];\n            for (let i = 0; i < br.length;i++){\n                let broker = [];\n                broker.push(<p> Ник: {br[i].name} </p>);\n                broker.push(<p> Денежные средства: {br[i].money} </p>);\n                let table = [];\n                table.push(\n                    <tr id = \"tr\">\n                        <th id = \"th\">Название акции</th>\n                        <th id = \"th\">Количество в портфеле</th>\n                        <th id = \"th\">Стоимость акции</th>\n                        <th id = \"th\">Акций на продажу</th>\n                        <th id = \"th\">Заявленная цена</th>\n                    </tr>\n                );\n                for (let j = 0; j < br[i].stocks.length; j++){\n                    table.push(\n                        <tr>\n                            <td id = \"td\">{br[i].stocksName[j]}</td>\n                            <td id = \"td\">{br[i].stocks[j]}</td>\n                            <td id = \"td\">{br[i].price[j]}</td>\n                            <td id = \"td\">{br[i].ontorg_stocks[j]}</td>\n                            <td id = \"td\">{br[i].ontorg_price[j]}</td>\n                        </tr>\n                    )\n                }\n                broker.push(<table id = \"table\">{table}</table>)\n                brokers.push(<div className = \"broker\" key = {br[i].id}> {broker}</div>)\n            }\n            return <div>{brokers}</div>\n        }\n    }\n\n}\n","import React from 'react';\nimport \"./main.css\"\n\nvar pr = 0;\n\nexport default class User extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            username: props.username,\n            brokers: props.brokers,\n            stocks: props.stocks,\n            count: 0,\n            index: 0,\n            pr: 0\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"User\">\n                <h2>\n                <table className=\"table\">\n                    <tr>\n                        <th className=\"th1\">БИРЖА</th>\n                        <th className=\"th2\">\n                            <div>Мир</div>\n                            <div>Инвестиций</div>\n                        </th>\n                    </tr>\n                </table>\n                </h2>\n                <nav className=\"one\">\n                    <ul>\n                        <li> {this.props.username} </li>\n                        \n                    </ul>\n                </nav>\n\n                <div className=\"info\">\n                    <div className=\"UserInfo\">{this.get_info(this.props.username, this.props.brokers)}</div>\n                    <div className=\"BrokerInfo\">{this.get_torgs(this.props.stocks)}</div>\n                    <div className=\"Sells\">\n                        <div className=\"Sell\">\n                            <table id = \"table1\">\n                                <th>\n                                <tr>\n                                    <th id = \"th\">id</th>\n                                    <th id = \"th\">Количество</th>\n                                </tr>\n                                <tr>\n                                    <th><input onChange={this.get_index}/></th>\n                                    <th><input onChange={this.get_count}/></th>\n                                </tr>\n                                </th>\n                                \n                                <tr id = \"bot\"><button id=\"a1\" onClick={this.sell}> Продать </button></tr>\n                                \n                            </table>\n                            \n                        </div>\n                        <div className=\"Buy\">\n                            <table id = \"table2\">\n                                <th>\n                                <tr id = \"tr\">\n                                    <th id = \"th\">id</th>\n                                    <th id = \"th\">Количество</th>\n                                </tr>\n                                <tr>\n                                    <th ><input onChange={this.get_index}/></th>\n                                    <th ><input onChange={this.get_count}/></th>\n                                </tr>\n                                </th>\n                                <tr id = \"bot\"><button id=\"a1\" onClick={this.buy}> Купить </button></tr>\n                            </table>\n                        </div>     \n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n    get_info(name, br) {\n        for (let i = 0; i < br.length; i++) {\n            if (br[i].name === name) {\n                let broker = [];\n                \n                let Sum = br[i].money;\n                for (let j = 0; j < br[i].stocks.length; j++){\n                    Sum+=br[i].stocks[j]*br[i].price[j];\n                }\n\n                pr = Sum - br[i].sum;\n                let znak=\"\";\n                if(pr>=0){\n                    znak = \"+\";\n                }\n\n                broker.push(<div id = \"Sum\">Общая Стоимость: {Sum}<p2>({znak}{pr})</p2></div>)\n                broker.push(<p> Денежные стредства: {br[i].money}</p>);\n                let table = [];\n                table.push(\n                    <tr >\n                        <th id = \"th\">id</th>\n                        <th id = \"th\">Название акции</th>\n                        <th id = \"th\">Количество в портфеле</th>\n                        <th id = \"th\">Стоимость одной</th>\n                        <th id = \"th\">Стоимость акций</th>\n                        <th id = \"th\">Акций на продажу</th>\n                        <th id = \"th\">Заявленная цена</th>\n                    </tr>\n                );\n                for (let j = 0; j < br[i].stocks.length; j++) {\n                    table.push(\n                        <tr>\n                            <td id = \"td\">{j}</td>\n                            <td id = \"td\">{br[i].stocksName[j]}</td>\n                            <td id = \"td\">{br[i].stocks[j]}</td>\n                            <td id = \"td\">{br[i].price[j]}</td>\n                            <td id = \"td\">{br[i].price[j]*br[i].stocks[j]}</td>\n                            <td id = \"td\">{br[i].ontorg_stocks[j]}</td>\n                            <td id = \"td\">{br[i].ontorg_price[j]}</td>\n                    </tr>\n                    )\n                }\n                broker.push(<table id = \"table\">{table}</table>);\n                return <div className=\"broker\">{broker}</div>\n            }\n        }\n    }\n\n    get_torgs(st) {\n        let table = [];\n        table.push(\n            <tr  id = \"tr\">\n                <th  id = \"th\">id</th>\n                <th id = \"th\">Название акции</th>\n                <th  id = \"th\">Количество доступных</th>\n                <th  id = \"th\">Стоимость акции</th>\n            </tr>\n        );\n\n        for (let i = 0; i < st.length; i++) {\n            table.push(\n                <tr>\n                    <td id = \"td\">{i}</td>\n                    <td id = \"td\">{st[i].name}</td>\n                    <td id = \"td\">{st[i].in_torg}</td>\n                    <td id = \"td\">{st[i].price}</td>\n                </tr>\n            )\n        }\n        return <div className=\"broker\" id=\"tt\"><p> Рынок </p><table id = \"table\">{table}</table></div>\n    }\n\n\n    sell = (event) => {\n        if(this.state.index > this.state.stocks.length) {\n            console.log(this.state.index ,\">\", this.state.stocks.length);\n            return;\n        }\n        let br = this.state.brokers;\n        for (let i = 0; i < br.length; i++) {\n            if (br[i].name === this.state.username) {\n                if(this.state.count > br[i].stocks[this.state.index]) {\n                    return;\n                }\n            }\n        }\n        this.props.sell(this.props.username, this.state.index, this.state.count);\n    };\n\n    buy = (event) => {\n        let br = this.state.brokers;\n        if(this.state.index > this.state.stocks.length) {\n            return;\n        }\n        for (let i = 0; i < br.length; i++) {\n            if (br[i].name === this.state.username) {\n                if(this.state.count > this.state.stocks[this.state.index].in_torg) {\n                    return;\n                }\n                if(br[i].money < this.state.stocks[this.state.index].price * this.state.count) {\n                    return;\n                }\n            }\n        }\n        this.props.buy(this.props.username, this.state.index, this.state.count);\n    };\n\n    get_index = (event) => {\n        this.setState({index: Number(event.target.value)});\n    };\n\n    get_count = (event) => {\n        this.setState({count: Number(event.target.value)});\n    };\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n//serviceWorker.unregister();\n"],"sourceRoot":""}